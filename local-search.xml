<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Learn Rust for Solana</title>
    <link href="/2022/06/26/Learn_Rust_for_Solana/"/>
    <url>/2022/06/26/Learn_Rust_for_Solana/</url>
    
    <content type="html"><![CDATA[<h2 id="Variables-type"><a href="#Variables-type" class="headerlink" title="Variables type"></a>Variables type</h2><h3 id="unsigned"><a href="#unsigned" class="headerlink" title="unsigned"></a>unsigned</h3><p>Unsigned type can not be nagative.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-comment">// u8, u16, u32, u64, u128</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">unsigned</span>: <span class="hljs-type">u8</span> = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="singed"><a href="#singed" class="headerlink" title="singed"></a>singed</h3><p>Can be nagative.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-comment">// i8, i16, i32, i64, i128</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">signed</span>: <span class="hljs-type">i8</span> = -<span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><h3 id="Char"><a href="#Char" class="headerlink" title="Char"></a>Char</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-comment">// char - can only be</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">letter</span> = <span class="hljs-string">&quot;c&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">emoji</span> = <span class="hljs-string">&quot;\u&#123;1F600&#125;&quot;</span>; <span class="hljs-comment">// :D</span><br></code></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">is_true</span>: <span class="hljs-type">bool</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">u8</span>, <span class="hljs-number">3</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-variable">other_arr</span>: [<span class="hljs-type">u8</span>; <span class="hljs-number">5</span>] = [<span class="hljs-number">100</span>; <span class="hljs-number">5</span>];<br><br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;index: &#123;&#125;, length: &#123;&#125;&quot;</span>, arr[<span class="hljs-number">0</span>], other_arr.<span class="hljs-title function_ invoke__">len</span>());<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, other_arr);<br></code></pre></td></tr></table></figure><h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">tuple1</span>: (<span class="hljs-type">u8</span>, <span class="hljs-type">bool</span>, <span class="hljs-type">f32</span>) = (<span class="hljs-number">5</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">2.1</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">tuple2</span> = (<span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br><br><span class="hljs-comment">// destructing </span><br><span class="hljs-keyword">let</span> (a, b, c) = tuple1;<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;a:&#123;&#125;, b:&#123;&#125;, c:&#123;&#125;&quot;</span>, a, b, c);<br></code></pre></td></tr></table></figure><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">is_even</span>(<span class="hljs-number">2</span>));<br>&#125;<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_even</span>(num: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">digit</span>: <span class="hljs-type">u8</span> = num % <span class="hljs-number">2</span>;<br>    digit == <span class="hljs-number">0</span> <span class="hljs-comment">// reture bool</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="mut"><a href="#mut" class="headerlink" title="mut"></a>mut</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-comment">// add [mut] if you want to update the variable</span><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">num</span> = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, num);<br>num = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, num);<br></code></pre></td></tr></table></figure><h3 id="array-and-slice"><a href="#array-and-slice" class="headerlink" title="array and slice"></a>array and slice</h3><p>length of slice cannot be known at the compiling time.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = &amp;arr[<span class="hljs-number">1</span> .. <span class="hljs-number">3</span>]; <span class="hljs-comment">// [1, 2] don&#x27;t know the length</span><br><span class="hljs-title function_ invoke__">borrowing_slice</span>(arr, slice);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">borrowing_slice</span>(arr: [<span class="hljs-type">u8</span>; <span class="hljs-number">4</span>], slice: &amp;[<span class="hljs-type">u8</span>]) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, arr);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, slice);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;length: &#123;&#125;&quot;</span>, slice.<span class="hljs-title function_ invoke__">len</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, slice[<span class="hljs-number">0</span>], slice[<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">str</span>: &amp;<span class="hljs-type">str</span> = <span class="hljs-string">&quot;hello world&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">string</span>: <span class="hljs-type">String</span> = String::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello world&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = &amp;string[.. <span class="hljs-number">6</span>];<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;length: &#123;&#125;&quot;</span>, slice.<span class="hljs-title function_ invoke__">len</span>());<br><br>    string.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>    string.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;! Hoipo&quot;</span>);<br>    string = string.<span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;Bye&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, string);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span> = -<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;great than 0&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;less than 0&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;is 0&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// not include 6</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">6</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">4</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i);<br>        i += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Exit&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="match-statement"><a href="#match-statement" class="headerlink" title="match statement"></a>match statement</h3><p>just like the [switch] for other language.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">match</span> i &#123;<br>        <span class="hljs-number">0</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;0&quot;</span>),<br>        <span class="hljs-number">1</span> | <span class="hljs-number">2</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;1,2&quot;</span>),<br>        <span class="hljs-number">3</span>..=<span class="hljs-number">4</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;3,4&quot;</span>),<br>        _ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;default&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br> <span class="hljs-keyword">let</span> <span class="hljs-variable">name</span> = String::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hoipo&quot;</span>);<br> <span class="hljs-keyword">let</span> <span class="hljs-variable">bird</span> = Bird &#123;name, attack: <span class="hljs-number">5</span>&#125;;<br> bird.<span class="hljs-title function_ invoke__">print_name</span>();<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Bird</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    attack: <span class="hljs-type">u64</span><br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_name</span>(&amp;<span class="hljs-keyword">self</span>)&#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="trauts-interfaces"><a href="#trauts-interfaces" class="headerlink" title="trauts(interfaces)"></a>trauts(interfaces)</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br> <span class="hljs-keyword">let</span> <span class="hljs-variable">name</span> = String::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hoipo&quot;</span>);<br> <span class="hljs-keyword">let</span> <span class="hljs-variable">bird</span> = Bird &#123;name, attack: <span class="hljs-number">5</span>&#125;;<br> bird.<span class="hljs-title function_ invoke__">print_name</span>();<br> <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, bird.<span class="hljs-title function_ invoke__">can_fly</span>(), bird.<span class="hljs-title function_ invoke__">is_animal</span>());<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Bird</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    attack: <span class="hljs-type">u64</span><br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_name</span>(&amp;<span class="hljs-keyword">self</span>)&#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.name);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">can_fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">can_fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span>;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_animal</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span>: MyEnum = MyEnum::A;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span>: MyEnum = MyEnum::<span class="hljs-title function_ invoke__">B</span>(<span class="hljs-number">34</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span>: MyEnum = MyEnum::C&#123;x:<span class="hljs-number">4</span>, y: <span class="hljs-number">23</span>&#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, a);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, b);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, c);<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">MyEnum</span>::<span class="hljs-title function_ invoke__">B</span>(val) = b &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, val);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">MyEnum</span>::C&#123;x, y&#125; = c &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, x, y);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">MyEnum</span> &#123;<br>    A,<br>    <span class="hljs-title function_ invoke__">B</span>(<span class="hljs-type">i32</span>),<br>    C &#123;x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i64</span>&gt; = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, vec.<span class="hljs-title function_ invoke__">len</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, vec[<span class="hljs-number">0</span>]);<br><br>    vec.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">6</span>);<br>    vec.<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, vec);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br><br>    map.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;Hi&quot;</span>);<br>    map.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Hello&quot;</span>);<br>    <br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, map);<br><br>    <span class="hljs-keyword">match</span> map.<span class="hljs-title function_ invoke__">get</span>(&amp;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-type">str</span>) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-type">str</span>),<br>        _ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Dosen&#x27;t exist in map&quot;</span>),<br>    &#125;<br><br>    <span class="hljs-keyword">match</span> map.<span class="hljs-title function_ invoke__">get</span>(&amp;<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-type">str</span>) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-type">str</span>),<br>        _ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Dosen&#x27;t exist in map&quot;</span>),<br>    &#125;<br><br>    map.<span class="hljs-title function_ invoke__">remove</span>(&amp;<span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, map);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>It is a typcal Enum type.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">divide</span> (dividend: <span class="hljs-type">i32</span>, divisor: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">if</span> dividend % divisor != <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-literal">None</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>( dividend / divisor)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">divide1</span>: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-title function_ invoke__">divide</span>(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>);<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">divide2</span>: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-title function_ invoke__">divide</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125; unwraps to &#123;&#125;&quot;</span>, divide1, divide1.<span class="hljs-title function_ invoke__">unwrap</span>());<br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125; unwraps to &#123;&#125;&quot;</span>, divide2, divide2.<span class="hljs-title function_ invoke__">unwrap</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">MyError</span> &#123;<br>    Error1<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">divide</span> (dividend: <span class="hljs-type">i32</span>, divisor: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, MyError&gt; &#123;<br>    <span class="hljs-keyword">if</span> dividend % divisor != <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-title function_ invoke__">Err</span>(MyError::Error1)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>( dividend / divisor)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">divide1</span> = <span class="hljs-title function_ invoke__">divide</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>);<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">res</span> = divide1.<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;we creshed&quot;</span>);<br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, res);<br>    <span class="hljs-comment">//    println!(&quot;&#123;:?&#125; unwraps to &#123;&#125;&quot;, divide1, divide1.unwrap());</span><br>    <span class="hljs-comment">//    println!(&quot;&#123;:?&#125; unwraps to &#123;&#125;&quot;, divide2, divide2.unwrap());</span><br>    <span class="hljs-comment">// println!(&quot;&#123;&#125;&quot;, divide1.unwrap_or(233));</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Rust</tag>
      
      <tag>Blockchain</tag>
      
      <tag>Solana</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/26/hello-world/"/>
    <url>/2022/06/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>微信字体大小设置对rem布局影响及修复方案</title>
    <link href="/2021/09/04/%E5%BE%AE%E4%BF%A1%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE%E5%AF%B9rem%E5%B8%83%E5%B1%80%E5%BD%B1%E5%93%8D%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/"/>
    <url>/2021/09/04/%E5%BE%AE%E4%BF%A1%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE%E5%AF%B9rem%E5%B8%83%E5%B1%80%E5%BD%B1%E5%93%8D%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a><strong>起因</strong></h2><p>微信安卓版 7.0.10 版本起，如果微信里更改了app的字体大小，会影响网页中的字体正常显示。因此，如果网页使用了常见的REM适配布局方案，就会受到影响。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h2><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a><strong>iOS</strong></h3><p>在css中加入以下CSS即可消除app设置对字体的影响：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    -webkit-text-size-adjust: <span class="hljs-number">100%</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a><strong>安卓</strong></h3><p>安卓的解决方案思路来源于官方的<a href="https://developers.weixin.qq.com/community/develop/doc/000a26b86948f8743cb9a6da951409">《关于微信安卓端网页字体适配的通知》</a>。</p><h4 id="方案一：把微信的字体设置恢复回去"><a href="#方案一：把微信的字体设置恢复回去" class="headerlink" title="方案一：把微信的字体设置恢复回去"></a><strong>方案一：把微信的字体设置恢复回去</strong></h4><p>JSAPI提供了用于设置字体大小的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;WeixinJSBridgeReady&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-title class_">WeixinJSBridge</span>.<span class="hljs-title function_">invoke</span>(<span class="hljs-string">&quot;setFontSizeCallback&quot;</span>, &#123;<br>        <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;2&#x27;</span><br>    &#125;); <br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>此方案存在一定的问题，它只会在网页加载时JSAPI加载完成时触发。当后面用户手动点击右上角的<code>···</code>菜单里面的“字体设置”来再次调整字体时，页面的字体放大倍数就会被再次调整，rem布局的页面也会被打乱。因此，需要监听页面内的调整字体大小的事件再做进一步处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">WeixinJSBridge</span> == <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">WeixinJSBridge</span>.<span class="hljs-property">invoke</span> == <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-title function_">handleFontSize</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;WeixinJSBridgeReady&quot;</span>, handleFontSize, <span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFontSize</span> () &#123;<br>        <span class="hljs-comment">// 设置网页字体为默认大小</span><br>        <span class="hljs-title class_">WeixinJSBridge</span>.<span class="hljs-title function_">invoke</span>(<span class="hljs-string">&#x27;setFontSizeCallback&#x27;</span>, &#123; <span class="hljs-string">&#x27;fontSize&#x27;</span> : <span class="hljs-number">0</span> &#125;);<br>        <span class="hljs-comment">// 重写设置网页字体大小的事件，&#x27;menu:setfont&#x27;事件的触发时机为：</span><br>        <span class="hljs-comment">// 1. 进入页面时js-sdk初始化时会触发一次</span><br>        <span class="hljs-comment">// 2. 当用户拖动“字体设置”菜单的滑块时，也会触发</span><br>        <span class="hljs-title class_">WeixinJSBridge</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;menu:setfont&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title class_">WeixinJSBridge</span>.<span class="hljs-title function_">invoke</span>(<span class="hljs-string">&#x27;setFontSizeCallback&#x27;</span>, &#123; <span class="hljs-string">&#x27;fontSize&#x27;</span> : <span class="hljs-number">0</span> &#125;);<br>        &#125;);<br>     &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><p>把上面的代码放在页面初始化的地方，微信的字体大小设置便会失效，对页面完全没有影响了，开发者只需要按照正常的REM方案布局即可，无需再作额外的字体计算。</p><h4 id="方案二：反向重置-font-size"><a href="#方案二：反向重置-font-size" class="headerlink" title="方案二：反向重置 font-size"></a><strong>方案二：反向重置 font-size</strong></h4><p>在讨论这个方案之前，容我先解释一下微信app内“设置字体大小”的实现原理。 <img src="https://docimg6.docs.qq.com/image/AqE61LBis-1xzoBOFaYwwA.png?w=1087&h=578" alt="img">        </p><p>大小设置上面每一格都对应着一定的字体缩放比率，比如上图所示的位置，缩放比率时1.55倍，此时，网页dom模型中的html元素中默认的fontSize会变成<br>$$<br>16px * 1.55 = 24.8px<br>$$<br>假如你要给某个元素设置css的fontSize属性，对应地，webview会自动帮你乘以这个字体缩放比率，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> $box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br>$box.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-string">&#x27;10px&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getComputedStyle</span>($box, <span class="hljs-literal">null</span>)[<span class="hljs-string">&#x27;font-size&#x27;</span>];<br><span class="hljs-comment">// 15.5px</span><br></code></pre></td></tr></table></figure><p>好了，上面的原理对于理解如下方案非常重要。</p><p>利用反向重置 font-size 的数值达到还原字体标准大小的目的，此方法在效果上也比较理想。代码示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 以下代码思路来源网络。同时代码放在 body 标签开头位置效果最佳</span><br><span class="hljs-comment">// 先创建一个div，然后把它的fontSize设置成10px，再添加到dom树中</span><br><span class="hljs-keyword">var</span> $dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>); <br>$dom.<span class="hljs-property">style</span> = <span class="hljs-string">&#x27;font-size: 10px&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>($dom);  <br><span class="hljs-comment">// 计算出放大后的字体大小</span><br><span class="hljs-keyword">var</span> scaledFontSize = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getComputedStyle</span>($dom, <span class="hljs-literal">null</span>).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;font-size&#x27;</span>));<br><span class="hljs-comment">// 计算原字体和放大后字体的比例，这个就是上面原理中提到的缩放比率的倒数，1/比率</span><br><span class="hljs-keyword">var</span> scaleFactor = <span class="hljs-number">10</span> / scaledFontSize;<br><span class="hljs-comment">// 取 html 元素的字体大小</span><br>﻿<span class="hljs-keyword">var</span> originRootFontSize = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getComputedStyle</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>, <span class="hljs-literal">null</span>).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;font-size&#x27;</span>));<br><span class="hljs-comment">// 由于设置 font-size 后实际会变大，故 font-size 需设置为更小一级</span><br><span class="hljs-comment">// originRootFontSize * scaleFactor 计算出来的值大概时16px，因为给fontSize赋值时，webview会自动乘以缩放比率，所以要再乘多一个scaleFactor</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = originRootFontSize * scaleFactor * scaleFactor + <span class="hljs-string">&#x27;px&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>方案一和方案二是两种不同的方案，不应该混合使用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>微信</tag>
      
      <tag>布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
